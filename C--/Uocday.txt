Ban đầu có một dãy B. Người ta xây dựng dãy A bằng cách ghép liên tiếp một số nguyên lần dãy B ta thu được dãy A. Sau khi có được dãy A từ B, xóa đi một số phần tử cuối của dãy A thu được dãy C (có thể không xóa số nào).
-----------------------
#include <bits/stdc++.h>
 
using namespace std;
#define nothing ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define ll long long
#define ull unsigned long long
#define fi first
#define se second
#define pb push_back
#define endl "\n"
const ll oo = 0x3f3f3f3f;
const ll mod = 1e9 + 7;
const int maxn = 1e6 + 5;
const int maxa = 2e3 + 5;

string P, T;
int z[maxn], n;
int s[maxn];

int main() {
    nothing
    if (fopen("ss.inp", "r")) {
        freopen("ss.inp", "r", stdin);
        freopen("ss.out", "w", stdout);
    }
    int m; cin >> m;
    for (int i = 1; i <= m; i++) {
        cin >> s[i];
    }
    z[1] = 0;
    int l = 0, r = 0;
    // if (m % 2 == 1) m--;
    for (int k = 2; k <= m; k++){
        int x = 0;
        if (k <= r) x = min(z[k - l + 1], r - k + 1); //khác biệt
 
        while (k + x <= m && s[x + 1] == s[k + x]) x++;//trâu
        z[k] = x;
        if (r < k + z[k] - 1){
            l = k;
            r = k + z[k] - 1;
        }
    }
    int ans = +oo;
    int id = 1;
    // for (int i = 1; i <= m; i++) cout << z[i];
    // cout << endl;
    for (int i = 2; i <= m; i++) {
        if (i - 1 + z[i] == m) {
            ans = i - 1;
            break;
        }
    }
    cout << ans << endl;
    return 0;
}
