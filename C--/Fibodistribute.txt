Cho dãy 𝑎 gồm 𝑛 phần tử được đánh chỉ số từ 1 đến 𝑛. Hãy đếm số cách chia dãy 𝑎 thành các
dãy con gồm các phần tử liên tiếp sao cho tổng của mỗi dãy con là một số Fibonacci.
-------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
 
using namespace std;
#define nothing ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define ll long long
#define ull unsigned long long
#define fi first
#define se second
#define pb push_back
const ll oo = 0x3f3f3f3f;
const ll MOD = 1e9 + 7;
const int maxn = 1e6 + 5;
const int maxa = 2e3 + 5;

ull f[maxn];
void fibonacci() {
    f[1] = 0; f[2] = 1;
    for (int i = 3; i <= 80; i++) {
        f[i] = f[i - 1] + f[i - 2];
    }
}

ll n, a[maxn], dp[maxn], sum[maxn];
map<ll, ll> id;
int main() {
    nothing
    if (fopen("fibodistribute.inp", "r")) {
        freopen("fibodistribute.inp", "r", stdin);
        freopen("fibodistribute.out", "w", stdout);
    }
    fibonacci();
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        sum[i] = sum[i - 1] + a[i];
    }
    
    // dp[0] = 1;
    // for (int i = 1; i <= n; i++) {
    //     int s = 0;
    //     for (int j = i; j >= 0; j--) {
    //         s += a[j];
    //         if (s.find(s) != s.end()) {
    //             dp[i] = (dp[i] + dp[j - 1]) % MOD;
    //         }
    //     }
    // }
    // cout << dp[n] % MOD;
    
    dp[0] = 1; id[0] = 0; 
    ll s = 0;
    for (int i = 1; i <= n; i++) {
        s += a[i];
        for (int j = 3; j <= 80; j++) {
            // sum += a[j];
            if (id.count(s - f[j])) {
                dp[i] = (dp[id[s - f[j]]] + dp[i]) % MOD;
            }
        }
        id[s] = i;
    }
    cout << dp[n] % MOD;
}