Cho n quân bài, trên mỗi quân bài ghi một số nguyên dương nhỏ hơn 1000. Các quân bài được xếp
thành một dãy, quân nọ nối tiếp quân kia. An vừa phát minh ra một trò chơi mới. Trò chơi đòi hỏi
phải thực hiện một số bước. Tại mỗi bước, phải loại bỏ một trong các quân bài trong dãy, không
được phép loại quân bài đầu tiên cũng như quân bài cuối cùng. Đối với mỗi quân bài bị loại bỏ sẽ
nhận được số điểm bằng tích của số ghi trên quân bài này với tổng các số ghi trên hai quân bài xếp
cạnh nó. Trò chơi kết thúc khi dãy chỉ còn hai quân bài đầu tiên và cuối cùng.
Yêu cầu: Hãy tìm số lượng điểm lớn nhất có thể đạt được từ trò chơi mà An phát minh
Dữ liệu: Vào từ tệp văn bản GQB.INP:
 Dòng đầu tiên chứa số nguyên dương n ( 3 ≤ n ≤ 700),
 Dòng thứ hai chứa n số nguyên là các số viết trên các quân bài được liệt kê theo thứ tự
chúng xuất hiện trên dãy quân bài.
Kết quả: Đưa ra tệp văn bản GQB.OUT: số lượng điểm lớn nhất đạt được
--------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
#define atami ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define ll long long
#define fi first
#define se second
#define pb push_back
#define el "\n"
const int maxn = 1e6 + 5;
const int maxa = 1e3 + 5;
ll n, a[maxa], f[maxa][maxa];

void Solve();
void Output();
void Input() {
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
}

void Solve() {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            f[i][j] = -1;
        }
    }
    // for (int i = 1; i < n; i++) {
    //     f[i][i] = 0;
    //     f[i][i + 1] = 0;
    // }
    // f[n][n] = 0;
}
int Tinh(int l, int r) {
    if (l == r || l + 1 == r) return 0;
    if (f[l][r] != -1) return f[l][r];
    for (int i = l + 1; i <= r - 1; i++) {
        f[l][r] = max(f[l][r], Tinh(l,i) + Tinh(i,r) + a[i] * (a[l] + a[r]));
    }
    return f[l][r];
}
void Output() {
    cout << Tinh(1,n);
}
#define SS DAODAY
int main() {
    atami;
    if (fopen("GQB.INP","r")) {
        freopen("GQB.INP","r",stdin);
        freopen("GQB.OUT","w",stdout);
    }
    Input();
    Solve();
    Output();
}
