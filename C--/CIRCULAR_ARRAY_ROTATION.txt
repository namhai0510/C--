https://www.hackerrank.com/challenges/circular-array-rotation/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen
-------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
#define atami ios_base::sync_with_stdio(0); cin.tie(NULL);
#define ll long long
#define fi first
#define se second
#define pb push_back
#define el "\n"
const int maxn = 1e7 + 5;
const int maxa = 1e3 + 5;
ll n,k,q;
ll queries[maxn], a[maxn];

void Input() {
    cin >> n >> k >> q;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    for (int i = 1; i <= q; i++) {
        cin >> queries[i];
    }
}
void Solve() {
    for (int i = 1; i <= q; i++) {
        int t = (queries[i] + n*n - k + 1) % n;
        //if (t > n) t -= n;
        if (t == 0) t = n;
        cout << a[t] << el;
    }
}
void Output() {

}
int main() {
    //freopen("SS.INP","r",stdin);
    atami;
    Input();
    Solve();
    Output();
}