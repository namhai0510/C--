https://www.hackerrank.com/challenges/magic-square-forming/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen
-------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
#define atami ios_base::sync_with_stdio(0); cin.tie(NULL);
#define ll long long
#define fi first
#define se second
#define pb push_back
#define el "\n"
const int maxn = 1e6 + 5;
const int maxa = 1e3 + 5;
int cost;
vector<int> res;
int a[3][3];
vector<vector<vector<int>>> magicSquares = {
        {{8, 1, 6}, {3, 5, 7}, {4, 9, 2}},
        {{6, 1, 8}, {7, 5, 3}, {2, 9, 4}},
        {{4, 9, 2}, {3, 5, 7}, {8, 1, 6}},
        {{2, 9, 4}, {7, 5, 3}, {6, 1, 8}},
        {{8, 3, 4}, {1, 5, 9}, {6, 7, 2}},
        {{4, 3, 8}, {9, 5, 1}, {2, 7, 6}},
        {{6, 7, 2}, {1, 5, 9}, {8, 3, 4}},
        {{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}
};
void Input() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cin >> a[i][j];
        }
    }
}
void Solve() {
    for (auto it : magicSquares) {
        cost = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                cost += abs(a[i][j] - it[i][j]);
            }
        }
        res.pb(cost);
    }
}
void Output() {
    cout << *min_element(res.begin(),res.end());
}
int main() {
    //freopen("SS.INP","r",stdin);
    atami;
    Input();
    Solve();
    Output();
}